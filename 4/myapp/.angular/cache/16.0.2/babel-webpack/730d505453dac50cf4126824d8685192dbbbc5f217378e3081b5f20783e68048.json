{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ProfileComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Username: \", ctx_r0.userData.username, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Email: \", ctx_r0.userData.email, \"\");\n  }\n}\nclass ProfileComponent {\n  getUserData() {\n    // Perform logic to fetch user data, e.g., make an HTTP request to a backend API\n    // Assign the fetched user data to the `userData` property\n    this.userData = {\n      username: 'JohnDoe',\n      email: 'john.doe@example.com'\n      // Include other user data properties as needed\n    };\n  }\n}\n\nProfileComponent.ɵfac = function ProfileComponent_Factory(t) {\n  return new (t || ProfileComponent)();\n};\nProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProfileComponent,\n  selectors: [[\"app-profile\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [3, \"click\"]],\n  template: function ProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Profile\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ProfileComponent_div_2_Template, 5, 2, \"div\", 0);\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_3_listener() {\n        return ctx.getUserData();\n      });\n      i0.ɵɵtext(4, \"Get User Data\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.userData);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ProfileComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","userData","username","email","ProfileComponent","getUserData","selectors","decls","vars","consts","template","ProfileComponent_Template","rf","ctx","ɵɵtemplate","ProfileComponent_div_2_Template","ɵɵlistener","ProfileComponent_Template_button_click_3_listener","ɵɵproperty"],"sources":["E:\\PICT\\Sem6\\WAD\\practical\\4\\myapp\\src\\app\\profile\\profile.component.ts","E:\\PICT\\Sem6\\WAD\\practical\\4\\myapp\\src\\app\\profile\\profile.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent {\n  userData: any; // Change the type according to your user data structure\n\n  getUserData() {\n    // Perform logic to fetch user data, e.g., make an HTTP request to a backend API\n    // Assign the fetched user data to the `userData` property\n    this.userData = {\n      username: 'JohnDoe',\n      email: 'john.doe@example.com'\n      // Include other user data properties as needed\n    };\n  }\n}\n","<h2>Profile</h2>\n\n<div *ngIf=\"userData\">\n  <p>Username: {{ userData.username }}</p>\n  <p>Email: {{ userData.email }}</p>\n  <!-- Display other user data as needed -->\n</div>\n\n<button (click)=\"getUserData()\">Get User Data</button>\n"],"mappings":";;;;ICEAA,EAAA,CAAAC,cAAA,UAAsB;IACjBD,EAAA,CAAAE,MAAA,GAAiC;IAAAF,EAAA,CAAAG,YAAA,EAAI;IACxCH,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAE,MAAA,GAA2B;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAD/BH,EAAA,CAAAI,SAAA,GAAiC;IAAjCJ,EAAA,CAAAK,kBAAA,eAAAC,MAAA,CAAAC,QAAA,CAAAC,QAAA,KAAiC;IACjCR,EAAA,CAAAI,SAAA,GAA2B;IAA3BJ,EAAA,CAAAK,kBAAA,YAAAC,MAAA,CAAAC,QAAA,CAAAE,KAAA,KAA2B;;;ADFhC,MAKaC,gBAAgB;EAG3BC,WAAWA,CAAA;IACT;IACA;IACA,IAAI,CAACJ,QAAQ,GAAG;MACdC,QAAQ,EAAE,SAAS;MACnBC,KAAK,EAAE;MACP;KACD;EACH;;;AAXWC,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;QAAhBA,gBAAgB;EAAAE,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCP7BlB,EAAA,CAAAC,cAAA,SAAI;MAAAD,EAAA,CAAAE,MAAA,cAAO;MAAAF,EAAA,CAAAG,YAAA,EAAK;MAEhBH,EAAA,CAAAoB,UAAA,IAAAC,+BAAA,iBAIM;MAENrB,EAAA,CAAAC,cAAA,gBAAgC;MAAxBD,EAAA,CAAAsB,UAAA,mBAAAC,kDAAA;QAAA,OAASJ,GAAA,CAAAR,WAAA,EAAa;MAAA,EAAC;MAACX,EAAA,CAAAE,MAAA,oBAAa;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;MANhDH,EAAA,CAAAI,SAAA,GAAc;MAAdJ,EAAA,CAAAwB,UAAA,SAAAL,GAAA,CAAAZ,QAAA,CAAc;;;;;;SDKPG,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}